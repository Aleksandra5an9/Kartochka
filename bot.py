import os
import requests
from datetime import datetime
import pandas as pd
import schedule
import time
import matplotlib.pyplot as plt
from zipfile import ZipFile

# === –ü—É—Ç–∏ ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(BASE_DIR, 'data')
GRAPH_DIR = os.path.join(BASE_DIR, 'graphs')

history_file = os.path.join(DATA_DIR, 'history.csv')
excel_file = os.path.join(DATA_DIR, 'weekly_report.xlsx')
graph_zip = os.path.join(BASE_DIR, 'graphs.zip')

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(GRAPH_DIR, exist_ok=True)

# === Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv('TELEGRAM_TOKEN')  # –≤ Railway —É–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')  # –≤ Railway —É–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ ===
query_list = [
    '–ø–∏–∂–∞–º–∞ –º—É–∂—Å–∫–∞—è',
    '–ø–∏–∂–∞–º–∞ –º—É–∂—Å–∫–∞—è —Å–æ —à—Ç–∞–Ω–∞–º–∏',
    '–¥–∂–µ—Ä—Å–∏',
    '–¥–∂–µ—Ä—Å–∏ –º—É–∂—Å–∫–æ–π'
]
max_page = 3
brand = 'Rebel River'

id_to_sku = {
    260800583: 'RRPPSBK0924',
    260897865: 'RRPPKLBK0924',
    293878560: 'RRPPKLWT1224',
    375740835: 'RRPPKLBE0325',
    375742309: 'RRPPKLBKSS0425',
    375744765: 'RRPPKLWTSS0425',
    332051245: 'RRJGREYS010225',
    332082880: 'RRJLTGREYP020225',
    332084081: 'RRJGREEN030225',
    332084082: 'RRJBKORP040225',
    332084083: 'RRJGREYP050225'
}

def get_card_positions():
    arr = []
    for query in query_list:
        for page in range(1, max_page + 1):
            url = f"https://search.wb.ru/exactmatch/ru/common/v13/search?ab_testing=false&appType=1&curr=rub&dest=-1257484&hide_dtype=13&lang=ru&page={page}&query={query}&resultset=catalog&sort=popular&spp=30&suppressSpellcheck=false"
            res = requests.get(url)
            if res.status_code != 200:
                continue
            try:
                for card in res.json()['data']['products']:
                    if card.get('log') and card['brand'] == brand:
                        card_id = card['id']
                        sku = id_to_sku.get(card_id, str(card_id))
                        arr.append([
                            card['log']['position'],
                            card['log']['promoPosition'],
                            datetime.now().strftime('%Y-%m-%d %H:%M'),
                            query,
                            sku
                        ])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ JSON: {e}")
    return arr

def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': text
    }
    requests.post(url, data=payload)

def job():
    results = get_card_positions()
    if not results:
        send_to_telegram("–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    df_new = pd.DataFrame(results, columns=['Position', 'PromoPosition', 'Time', 'Query', 'SKU'])

    if os.path.exists(history_file):
        df_old = pd.read_csv(history_file)
        df_all = pd.concat([df_old, df_new], ignore_index=True)
    else:
        df_all = df_new
    df_all.to_csv(history_file, index=False)

    message = "üì¶ –ü–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n"
    for _, row in df_new.iterrows():
        message += f"üîç –ó–∞–ø—Ä–æ—Å: {row['Query']}\nüÜî –ê—Ä—Ç–∏–∫—É–ª: {row['SKU']}\nüìç –ü–æ–∑–∏—Ü–∏—è: {row['Position']}, –ü—Ä–æ–º–æ: {row['PromoPosition']}\nüïì –í—Ä–µ–º—è: {row['Time']}\n\n"

    alerts = []
    if os.path.exists(history_file):
        for sku in df_new['SKU'].unique():
            last = df_all[df_all['SKU'] == sku].sort_values('Time', ascending=False)
            if len(last) >= 2:
                try:
                    prev_pos = int(last.iloc[1]['Position'])
                    curr_pos = int(last.iloc[0]['Position'])
                    if curr_pos - prev_pos >= 20:
                        alerts.append(f"‚ö†Ô∏è –ê—Ä—Ç–∏–∫—É–ª {sku}: –ø–æ–∑–∏—Ü–∏—è —É–ø–∞–ª–∞ —Å {prev_pos} –¥–æ {curr_pos}")
                except:
                    pass

    if alerts:
        message += "\nüìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–µ–∑–∫–∏–µ –ø–∞–¥–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:\n" + "\n".join(alerts)

    send_to_telegram(message)

def export_to_excel():
    if not os.path.exists(history_file):
        return

    df = pd.read_csv(history_file)
    df['Time'] = pd.to_datetime(df['Time'])
    df.to_excel(excel_file, index=False)

    for f in os.listdir(GRAPH_DIR):
        os.remove(os.path.join(GRAPH_DIR, f))

    for sku in df['SKU'].unique():
        df_sku = df[df['SKU'] == sku].sort_values('Time')
        plt.figure()
        plt.plot(df_sku['Time'], df_sku['Position'], marker='o')
        plt.title(f'–ü–æ–∑–∏—Ü–∏–∏ –ø–æ {sku}')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ü–æ–∑–∏—Ü–∏—è')
        plt.gca().invert_yaxis()
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(os.path.join(GRAPH_DIR, f"{sku}.png"))
        plt.close()

    with ZipFile(graph_zip, 'w') as zipf:
        for f in os.listdir(GRAPH_DIR):
            zipf.write(os.path.join(GRAPH_DIR, f), arcname=f)

    print("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
schedule.every(4).hours.do(job)
schedule.every().sunday.at("10:00").do(export_to_excel)

job()
print("‚è≥ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")

while True:
    schedule.run_pending()
    time.sleep(1)
