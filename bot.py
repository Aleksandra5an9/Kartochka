import requests
from datetime import datetime
import pandas as pd
import schedule
import time
import os
import matplotlib.pyplot as plt
from zipfile import ZipFile

# === Telegram Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = os.getenv("TOKEN")
CHAT_IDS = os.getenv("CHAT_IDS", "").split(",")

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ ===
query_list = [
    '–ø–∏–∂–∞–º–∞ –º—É–∂—Å–∫–∞—è',
    '–ø–∏–∂–∞–º–∞ –º—É–∂—Å–∫–∞—è —Å–æ —à—Ç–∞–Ω–∞–º–∏',
    '–∫–æ—Å—Ç—é–º –¥–ª—è –¥–æ–º–∞ –º—É–∂—Å–∫–æ–π',
    '–ø–∏–∂–∞–º–∞ –º—É–∂—Å–∫–∞—è —à–µ–ª–∫–æ–≤–∞—è',
    '–¥–∂–µ—Ä—Å–∏ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏',
    '–æ–¥–µ–∂–¥–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏',
    '–¥–∂–µ—Ä—Å–∏ –º—É–∂—Å–∫–æ–π'
]
max_page = 3
brand = 'Rebel River'

# === –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID ‚Üí –ê—Ä—Ç–∏–∫—É–ª ===
id_to_sku = {
    260800583: 'RRPPSBK0924',
    260897865: 'RRPPKLBK0924',
    293878560: 'RRPPKLWT1224',
    375740835: 'RRPPKLBE0325',
    375742309: 'RRPPKLBKSS0425',
    375744765: 'RRPPKLWTSS0425',
    375744766: 'RRPPKLBESS0425',
    332051245: 'RRJGREYS010225',
    332082880: 'RRJLTGREYP020225',
    332084081: 'RRJGREEN030225',
    332084082: 'RRJBKORP040225',
    332084083: 'RRJGREYP050225'
}

# === –ü—É—Ç–∏ ===
history_file = 'data/history.csv'
excel_file = 'data/weekly_report.xlsx'
graph_dir = 'graphs/'
graph_zip = 'graphs.zip'

os.makedirs('data', exist_ok=True)
os.makedirs('graphs', exist_ok=True)

# === Telegram —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
def send_to_telegram(text):
    for chat_id in CHAT_IDS:
        try:
            url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
            payload = {'chat_id': chat_id.strip(), 'text': text}
            r = requests.post(url, data=payload)
            print(f"Telegram status ({chat_id}): {r.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram ({chat_id}): {e}")

# === Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ===
def send_file_to_telegram(file_path, caption=""):
    for chat_id in CHAT_IDS:
        try:
            url = f"https://api.telegram.org/bot{TOKEN}/sendDocument"
            with open(file_path, 'rb') as f:
                files = {'document': f}
                data = {'chat_id': chat_id.strip(), 'caption': caption}
                r = requests.post(url, data=data, files=files)
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ({chat_id}): {r.status_code}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ ({chat_id}): {e}")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫ ===
def get_card_positions():
    arr = []
    for query in query_list:
        for page in range(1, max_page + 1):
            url = (
                f"https://search.wb.ru/exactmatch/ru/common/v13/search?"
                f"ab_testing=false&appType=1&curr=rub&dest=-1257484&hide_dtype=13&"
                f"lang=ru&page={page}&query={query}&resultset=catalog&sort=popular&spp=30&"
                f"suppressSpellcheck=false"
            )
            try:
                res = requests.get(url)
                if res.status_code != 200:
                    continue
                for card in res.json()['data']['products']:
                    if card.get('log') and card['brand'] == brand:
                        card_id = card['id']
                        sku = id_to_sku.get(card_id, str(card_id))
                        arr.append([
                            card['log']['position'],
                            card['log']['promoPosition'],
                            datetime.now().strftime('%Y-%m-%d %H:%M'),
                            query,
                            sku
                        ])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    return arr

# === –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ===
def job():
    print("üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞ job...")
    send_to_telegram("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç.")

    results = get_card_positions()
    if not results:
        send_to_telegram("‚ùó–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    df_new = pd.DataFrame(results, columns=['Position', 'PromoPosition', 'Time', 'Query', 'SKU'])

    if os.path.exists(history_file):
        df_old = pd.read_csv(history_file)
        df_all = pd.concat([df_old, df_new], ignore_index=True)
    else:
        df_all = df_new
    df_all.to_csv(history_file, index=False)

    message = "üì¶ –ü–æ–∑–∏—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n"
    for _, row in df_new.iterrows():
        message += f"üîç {row['Query']}\nüÜî {row['SKU']}\nüìç {row['Position']} (–ü—Ä–æ–º–æ: {row['PromoPosition']})\nüïì {row['Time']}\n\n"

    send_to_telegram(message)

# === –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===
def export_to_excel():
    print("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –Ω–∞—á–∞—Ç...")
    if not os.path.exists(history_file):
        return
    df = pd.read_csv(history_file)
    df['Time'] = pd.to_datetime(df['Time'])
    df.to_excel(excel_file, index=False)

    for f in os.listdir(graph_dir):
        os.remove(os.path.join(graph_dir, f))

    for sku in df['SKU'].unique():
        df_sku = df[df['SKU'] == sku].sort_values('Time')
        plt.figure()
        plt.plot(df_sku['Time'], df_sku['Position'], marker='o')
        plt.title(f'–ü–æ–∑–∏—Ü–∏–∏: {sku}')
        plt.gca().invert_yaxis()
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(os.path.join(graph_dir, f'{sku}.png'))
        plt.close()

    with ZipFile(graph_zip, 'w') as zipf:
        for f in os.listdir(graph_dir):
            zipf.write(os.path.join(graph_dir, f), arcname=f)

    send_to_telegram("üìà –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /report –∏–ª–∏ /status ===
def check_for_commands():
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/getUpdates"
        res = requests.get(url)
        updates = res.json()['result']

        if not updates:
            return

        last_update = updates[-1]
        message = last_update.get('message', {})
        text = message.get('text', '')
        chat_id = message.get('chat', {}).get('id')
        update_id = last_update['update_id']

        if text.strip() == '/report' and str(chat_id) in CHAT_IDS:
            send_to_telegram("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç –∏ –≥—Ä–∞—Ñ–∏–∫–∏...")
            if os.path.exists(excel_file):
                send_file_to_telegram(excel_file, "üìä Excel-–æ—Ç—á—ë—Ç")
            if os.path.exists(graph_zip):
                send_file_to_telegram(graph_zip, "üñº –ì—Ä–∞—Ñ–∏–∫–∏")
            else:
                send_to_telegram("‚ö†Ô∏è –ì—Ä–∞—Ñ–∏–∫–∏ –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.")

        elif text.strip() == '/status' and str(chat_id) in CHAT_IDS:
            if os.path.exists(history_file):
                df = pd.read_csv(history_file)
                df['Time'] = pd.to_datetime(df['Time'])
                latest_df = df.sort_values('Time').groupby(['Query', 'SKU']).last().reset_index()

                msg = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
                for _, row in latest_df.iterrows():
                    msg += (
                        f"üîç {row['Query']}\n"
                        f"üÜî {row['SKU']}\n"
                        f"üìç {row['Position']} (–ü—Ä–æ–º–æ: {row['PromoPosition']})\n"
                        f"üïì {row['Time']:%Y-%m-%d %H:%M}\n\n"
                    )
                send_to_telegram(msg[:4096])  # –£—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
            else:
                send_to_telegram("‚ùó –ò—Å—Ç–æ—Ä–∏—è –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")

        # –°–±—Ä–æ—Å offset, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∞–ø–¥–µ–π—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
        requests.get(f"https://api.telegram.org/bot{TOKEN}/getUpdates?offset={update_id + 1}")
    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –≤ check_for_commands: {e}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
schedule.every(4).hours.do(job)
schedule.every().sunday.at("10:00").do(export_to_excel)

# –í—ã–∑–æ–≤ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
job()

print("‚è≥ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    try:
        schedule.run_pending()
        check_for_commands()
        time.sleep(1)
from flask import Flask
import threading
import os

app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_scheduler():
    import schedule
    import time
    while True:
        schedule.run_pending()
        check_for_commands()
        time.sleep(1)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ —Å—Ä–∞–∑—É
    job()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask, —Å–ª—É—à–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è Render
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

    except Exception as e:
        print(f"‚ùó –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        send_to_telegram(f"‚ùó –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
